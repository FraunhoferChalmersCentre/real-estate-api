openapi: "3.0.0"
info:
  version: 1.0.0
  title: Real Estate heating system API
  description: |
    API implemented by real estate owners. Exposes meta data, sensor observations and the 
    capability of receiving heat system control recommendations from an external agent.

    Example use case of adding a new heating system to a recommendation agent and start making recommendations:
    1. The agent system lists all available heating systems
    1. The agent adds a heating system to its collection of managed systems
    1. The agent makes multiple calls to the /observations endpoint, creating a model of the heating system and its connected buildings.
    1. The agent begin its control cycle by making calls to the /observations/latest endpoint, calculates a posts target feed temperature recommendations to the /recommendations/ endpoint
    1. The agent recommendation is received by the local building automation system and used to adjust actuators

servers:
  - url: '{server}/v1'
    variables:
      server:
        default: https://api.realestateowner.com
security:
  - bearerAuth: [] 
paths:
##################################################                
# HEATING SYSTEMS
##################################################
  /heatingsystems:
    get:
      description: Lists all available heatingsystems.
      tags:
        - Heating Systems
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/HeatingSystem.yaml'
        401:
          $ref: '#/components/responses/NotAuthorized'
        500:
          $ref: '#/components/responses/Error'

  /heatingsystems/{id}:
    get:
      description: Get metadata for a heatingsystem
      tags:
        - Heating Systems      
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: './schemas/HeatingSystem.yaml'
        401:
          $ref: '#/components/responses/NotAuthorized'
        500:
          $ref: '#/components/responses/Error'

  /heatingsystems/{id}/heatingcurve:
    get:
      description: >
        Returns the configured heating curve for this heating system.
        Data format is still TBD. Will most likely be optional since 
        not all heating systems are controlled using a heating curve.
      tags:
        - Heating Systems
      responses:
        200:
        401:
          $ref: '#/components/responses/NotAuthorized'
        500:
          $ref: '#/components/responses/Error'

  /heatingsystems/{id}/recommendations:
    post:
      tags:
        - Heating Systems
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: './schemas/Recommendation.yaml'
        401:
          $ref: '#/components/responses/NotAuthorized'
        500:
          $ref: '#/components/responses/Error'

##################################################                
# RADIATOR LOOPS
##################################################

  /heatingsystems/{id}/radiatorloops:
    get:
      description: List all radiatorloops connected to the heating system.      
      tags:
        - Radiator loops      
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: './schemas/RadiatorLoop.yaml'
        401:
          $ref: '#/components/responses/NotAuthorized'
        500:
          $ref: '#/components/responses/Error'

  /heatingsystems/{id}/radiatorloops/{radiatorloopid}/buildings:
    get:
      description: List all buildings served by this radiator loop.
      tags:
        - Radiator loops
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/Building.yaml'  
        401:
          $ref: '#/components/responses/NotAuthorized'
        500:
          $ref: '#/components/responses/Error'

  /heatingsystems/{id}/radiatorloops/{radiatorloopid}/buildings/{buildingid}/temperaturesensors:
    get:
      description: List all indoor temperature sensors in the building relevant for the agent.
      tags:
        - Radiator loops
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/Sensor.yaml' 

        401:
          $ref: '#/components/responses/NotAuthorized'
        500:
          $ref: '#/components/responses/Error' 


##################################################                
# SENSORS
##################################################

  /sensors/{id}:
    get:
      description: Metadata for a sensor.
      tags:
        - Sensors    
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: './schemas/Sensor.yaml'
        401:
          $ref: '#/components/responses/NotAuthorized'
        404:
          description: Not found
        500:
          $ref: '#/components/responses/Error'

  /sensors/{id}/observations/latest:
    get:
      description: >
        Returns the most recent observation of the sensor. 
        Can be implemented as a real time value or be the most recent value pushed to central storage.
      tags:
        - Sensors    
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: './schemas/Observation.yaml'
        401:
          $ref: '#/components/responses/NotAuthorized'
        404:
          description: Not found
        500:
          $ref: '#/components/responses/Error'


  /sensors/{id}/observations:
    description: >
      Returns stored historical observations for the sensor. The API doesn't support pagination in this version, 
      the consumer is expected to paginate using time intervals that are managable from a data volume 
      and response time perspective.
    get:
      tags:
        - Sensors
      parameters:
        - in: query
          name: startTime
          required: true
          schema:
            type: string
          format: date-time
          description: First point in time for the observation history request.
        - in: query
          name: endTime
          required: true
          schema:
            type: string
          format: date-time
          description: Last point in time for the observation history request.
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/Observation.yaml'
        401:
          $ref: '#/components/responses/NotAuthorized'
        404:
          description: Not found
        500:
          $ref: '#/components/responses/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    $ref: "./parameters/_index.yaml"
  schemas:
    $ref: "./schemas/_index.yaml"
  responses:
    NotAuthorized:
      description: The requester is unauthorized.
      content:
        application/json:
          schema:
            $ref: './schemas/Error.yaml'
    Error:
      description: An error occured.
      content:
        application/json:
          schema:
            $ref: './schemas/Error.yaml'   