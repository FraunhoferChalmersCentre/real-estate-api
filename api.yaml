openapi: "3.0.0"
info:
  version: 1.0.0
  title: Real Estate heating system API
  description: |
    The Real Estate Heating System API provides a high level abstraction of components in a central heating system for multi-dwellings and provides the means to both analyze system behaviour and suggest adjustments without exposing internal details of the building control systems. The API is provided by the real estate owner/facility manager and is responsible for delivering observations, data quality, metadata descriptions of the heat energy flow and access management. Multiple agents can consume the API and fetch observations as often as needed by the use case.
    Special care has been taken in the API design to facilitate a scale up of operations.

    Details
    Public github repo: https://github.com/fcc-sys/real-estate-api/
    ------------

    All dates/timestamps must be expressed using ISO 8601 format YYYY-MM-DDThh:mm:ss[.mmm]TZD

    ------------

    API implemented by real estate owners. Exposes meta data, sensor observations and the capability of receiving heat system control recommendations from an external agent.

    Example use case of adding a new heating system to a recommendation agent and start making recommendations:

    The agent system lists all available heating systems
    The agent adds a heating system to its collection of managed systems
    The agent makes multiple calls to the descriptive endpoints and creates a model of the heating system and its connected radiator loops, building and temperature sensors.
    The agent begin its control cycle by making calls to the /observations/latest endpoint, calculates a posts target feed temperature recommendations to the /recommendations/ endpoint
    The agent recommendation is received by the local building automation system and used to adjust actuators

servers:
  - url: "{server}/v1"
    variables:
      server:
        default: https://api.realestateowner.com
security:
  - bearerAuth: []
paths:
  ##################################################
  # HEATING SYSTEMS
  ##################################################
  /heatingsystems:
    get:
      description: Lists all available heatingsystems.
      tags:
        - Heating Systems
      operationId: listHeatingSystems
      responses:
        200:
          description: heating systems
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HeatingSystem"
        401:
          $ref: "#/components/responses/NotAuthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /heatingsystems/{heatingSystemId}:
    get:
      description: Get metadata for a heatingsystem
      tags:
        - Heating Systems
      operationId: getHeatingSystem
      parameters:
        - $ref: '#/components/parameters/heatingSystemIdParam'
      responses:
        200:
          description: heating system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeatingSystem"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /heatingsystems/{heatingSystemId}/heatingcurve:
    get:
      description: >
        Returns the configured heating curve for this heating system.
        Data format is still TBD. Will most likely be optional since
        not all heating systems are controlled using a heating curve.
      tags:
        - Heating Systems
      operationId: getHeatingCurve
      parameters:
        - $ref: '#/components/parameters/heatingSystemIdParam'
      responses:
        200:
          description: Local Temperature Curve Controller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureCurve'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /heatingsystems/{heatingSystemId}/recommendation:
    post:
      description: Posts a new recommendation for the heating system.
      tags:
        - Heating Systems
      operationId: updateRecommendation
      parameters:
        - $ref: '#/components/parameters/heatingSystemIdParam'
      requestBody:
        description: Recommendation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recommendation"
            example:
              offset: 4
              validFrom: 2021-08-22T17:02:28Z
              validTo: 2021-08-22T18:02:28Z
              agentId: 6c177c92-2fdb-421e-99e2-ee1db193d1a3
      responses:
        201:
          description: Created
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  ##################################################
  # RADIATOR LOOPS
  ##################################################

  /heatingsystems/{heatingSystemId}/radiatorloops:
    get:
      description: List all radiatorloops connected to the heating system.
      tags:
        - Radiator loops
      operationId: listRadiatorLoops
      parameters:
        - $ref: '#/components/parameters/heatingSystemIdParam'
      responses:
        200:
          description: radiator loops
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RadiatorLoop"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /heatingsystems/{heatingSystemId}/radiatorloops/{radiatorLoopId}/buildings:
    get:
      description: List all buildings served by this radiator loop.
      tags:
        - Radiator loops
      operationId: listBuildnings
      parameters:
        - $ref: '#/components/parameters/heatingSystemIdParam'
        - $ref: '#/components/parameters/radiatorLoopIdParam'
      responses:
        200:
          description: buildings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Building"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  ? /heatingsystems/{heatingSystemId}/radiatorloops/{radiatorLoopId}/buildings/{buildingId}/temperaturesensors
  : get:
      description: List all indoor temperature sensors in the building relevant for the agent.
      tags:
        - Radiator loops
      operationId: listTemperatureSensors
      parameters:
        - $ref: '#/components/parameters/heatingSystemIdParam'
        - $ref: '#/components/parameters/radiatorLoopIdParam'
        - $ref: '#/components/parameters/buildingIdParam'
      responses:
        200:
          description: temperature sensors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sensor"

        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  ##################################################
  # SENSORS
  ##################################################

  /sensors/{sensorId}:
    get:
      description: Metadata for a sensor.
      tags:
        - Sensors
      operationId: getSensor
      parameters:
        - $ref: '#/components/parameters/sensorIdParam'
      responses:
        200:
          description: sensor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sensor"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /sensors/{sensorId}/observations/latest:
    get:
      description: >
        Returns the most recent observation of the sensor.
        Can be implemented as a real time value or be the most recent value pushed to central storage.
      tags:
        - Sensors
      operationId: getLatestSensorObservation
      parameters:
        - $ref: '#/components/parameters/sensorIdParam'
      responses:
        200:
          description: latest observation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Observation"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /sensors/{sensorId}/observations:
    description: >
      Returns stored historical observations for the sensor. The API doesn't support pagination in this version,
      the consumer is expected to paginate using time intervals that are managable from a data volume
      and response time perspective.
    get:
      tags:
        - Sensors
      operationId: getSensorObservations
      parameters:
        - $ref: '#/components/parameters/sensorIdParam'
        - in: query
          name: startTime
          required: true
          schema:
            type: string
            format: date-time
          description: First point in time for the observation history request.
        - in: query
          name: endTime
          required: true
          schema:
            type: string
            format: date-time
          description: Last point in time for the observation history request.
      responses:
        200:
          description: observation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Observation"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    heatingSystemIdParam:
      name: heatingSystemId
      in: path
      required: true
      description: unique ID
      schema:
        type: string
    radiatorLoopIdParam:
      name: radiatorLoopId
      in: path
      required: true
      description: unique ID
      schema:
        type: string
    buildingIdParam:
      name: buildingId
      in: path
      required: true
      description: unique ID
      schema:
        type: string
    sensorIdParam:
      name: sensorId
      in: path
      required: true
      description: unique ID
      schema:
        type: string
  schemas:
    HeatingSystem:
      $ref: "./schemas/HeatingSystem.yaml"
    RadiatorLoop:
      $ref: "./schemas/RadiatorLoop.yaml"
    Observation:
      $ref: "./schemas/Observation.yaml"
    Building:
      $ref: "./schemas/Building.yaml"
    Recommendation:
      $ref: "./schemas/Recommendation.yaml"
    Sensor:
      $ref: "./schemas/Sensor.yaml"
    TemperatureCurve:
      $ref: "./schemas/TemperatureCurve.yaml"
  responses:
    BadRequest:
      description: The request cannot be processed.
      content:
        application/json:
          schema:
            $ref: "./schemas/Error.yaml"
    NotAuthorized:
      description: The requester is unauthorized.
      content:
        application/json:
          schema:
            $ref: "./schemas/Error.yaml"
    NotFound:
      description: The requested resource does not exist.
      content:
        application/json:
          schema:
            $ref: "./schemas/Error.yaml"
    UnexpectedError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: "./schemas/Error.yaml"
